로봇 설계

1. 다리의 joint 구현: 이는 중심으로부터의 quaternion들의 곱으로 각도항을 정의하고, 막대의 끝으로 joint의 위치를 구현하면 된다.

즉 다리의 joint를 구현하는 것은 당연히 본체+모터(+모터)+다리1+모터+다리2가 될것이다.


	이때 각 모터의 자유도는 1로 고정이다. 즉 쿼터니언보다 더 연산이 적게드는것이 가능할것이지만..... 알잖아?

몸체로부터 떨어진 거리로 다리 구현, 즉 다리막대의 끝을 향하는 벡터의 정의가 필요하다. 이는 모두 그림에 표현되어 있다.

그렇다면 이제는 System's Center of mass가 더 구현이 쉬울지, 아니면 Body's Centor of mass가 더 구현이 쉬울지를 생각해야한다.

먼저 계의 입장을 보자. 그렇다면 일단 편한점은 당연히 힘을 변환하지 않아, 토크를 훨씬 수월하게 계산할 수 있다는 것이다.

하지만 강체와는 다르게 로봇의 3차원각을 어떻게 정의하느냐의 문제가 생긴다.(물론 정의하지 않아도 된다. 그냥 position만 궁금한 거니까.

그래도 각이 없으면 다루기가 훨씬 불편해질것 같다.)

따라서 Body의 질점으로 다루는 것이 더 좋을 것 같다.

Body의 질점을 생각해보자. 그러면 다리서부터 힘들을 모두 회전변환시켜가며 body쪽으로 옮겨가야한다.

처음에는 이것이 어려울줄 알았는데, 생각보다 쉬울 것 같다.

우리는 각속도를 입력한다. 정확히는 각을 시간에 따라 입력한다.

leg2의 각속도, leg2의 땅 접지점의 토크--> leg2, motor의 토크(잠깐... 모터가 토크를 주지 않던가? 그러면 시스템의 질점이 더 나은건가?)

//하...물론 시간에 따른 각을 아니까 각가속도도 유도가능하고, 이를통해 힘을 모조리 계산하는 방법도 있다. 그런데...

각가속도가 큰 영향을 줄까? 무시하자!! 당연히 영향을 주지 멍청아//


매우 좋은 생각이났다.System이 압도적으로 좋다.



전체 토크를 계산한다. 그리고 전체 각운동량의 변화를 계산한다.

--> T = (d/dt)L_total = (d/dt)L_body + (d/dt)Sum(L_leg) --> (d/dt)L_body를 계산 가능하다. 위치도 마찬가지의 방법으로 한다.

그러면 모든 것을 계산할 수 있을 것이다. 잠깐.... 전체 부분 각운동량의 변화는 어떻게 아는가?--> 각가속도는 필연적 일수밖에 없다.

어라.. 사실 위 방법은 정확히 말하면, system으로부터 body를 얻어낸 것이다. 그냥 당연한거였네...



 각가속도도 같이 해야된다. 그러면 정확히 구할 수 있다. L=Q-1(L_leg)=Q-1(I_leg*w_leg)이고, 이를 미분하면 alpha가 나온다.

위 두식을 이용하면 되겠다.